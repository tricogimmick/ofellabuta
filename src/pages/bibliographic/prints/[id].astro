---
import type { GetStaticPaths } from "astro";
import BaseLayout from '../../../layouts/BaseLayout.astro';
import sqlite3 from 'sqlite3';
import type { PrintType } from '../../../types/print';
import type { SeriesType } from '../../../types/series';
import type { PublisherType } from "../../../types/publisher";
import type { BrandType } from "../../../types/brand";
import type { RelatedLinksType } from "../../../types/relatedLinks";

type ParamsType = {
    id: number;
};
type PropsType = {
    print: PrintType;
};
type GetStaticPathsType = {
    params: ParamsType;
    props: PropsType;
};
type ContentType = {
    orderNo: number;
    color: number | null;
    publishType: string;
    serializationStatus: string;
    title: string;
    author: string;
    role: string;
    description: string;
    pageNo: number | null;
};

export async function getStaticPaths() {
    const dbPath = import.meta.env.BIBLIODB_PATH;
    return new Promise<GetStaticPathsType[]>((ok, ng) => {
        const db = new sqlite3.Database(dbPath);
        try {
            db.all<PrintType>("SELECT * FROM prints ORDER BY id", [], (err, rows) => {
                if (err) {
                    ng(err);
                } else {
                    ok(rows.map(x => ({
                        params: { id: x.id ?? 0 },
                        props: { print: x }
                    })));
                }
            });
        } finally {
            db.close();
        }
    });
}

function getSeries(db: sqlite3.Database, seriesId: number) {
    return new Promise<SeriesType>((ok, ng) => {
        db.get<SeriesType>("SELECT * FROM series WHERE id = ?", [seriesId], (err, row) => {
            if (err) {
                ng(err);
            } else {
                ok(row);
            }
        });
    });
}

function getPublisher(db: sqlite3.Database, publisherId: number) {
    return new Promise<PublisherType>((ok, ng) => {
        db.get<PublisherType>("SELECT * FROM publishers WHERE id = ?", [publisherId], (err, row) => {
            if (err) {
                ng(err);
            } else {
                ok(row);
            }
        });
    });
}

function getBrand(db: sqlite3.Database, brandId: number) {
    return new Promise<BrandType>((ok, ng) => {
        db.get<BrandType>("SELECT * FROM brands WHERE id = ?", [brandId], (err, row) => {
            if (err) {
                ng(err);
            } else {
                ok(row);
            }
        });
    });
}

function getContents(db: sqlite3.Database, printId: number) {
    return new Promise<ContentType[]>((ok, ng) => {
        db.all<ContentType>(
            "SELECT c.orderNo, c.color, c.publishType, c.serializationStatus, " +
            "IFNULL(w.title, c.title) as title, p.name as author, rp.role, c.description, c.pageNo " +
            "FROM contents as c " +
            "LEFT JOIN works as w on w.id = c.workId " +
            "LEFT JOIN related_persons as rp ON rp.relatedType = 'WORK' and rp.relatedId = w.id " +
            "LEFT JOIN persons as p on p.id = rp.personId " + 
            "WHERE c.printId = ? " +
            "ORDER BY c.orderNo", 
            [printId], 
            (err, rows) => {
            if (err) {
                ng(err);
            } else {
                ok(rows || []);
            }
        });
    });
}

function getRelatedLinks(db: sqlite3.Database, printId: number) {
    return new Promise<RelatedLinksType[]>((ok, ng) => {
        db.all<RelatedLinksType>(
            "SELECT * FROM related_links WHERE relatedType = 'PRINT' AND relatedId = ?",
            [printId],
            (err, rows) => {
                if (err) {
                    ng(err);
                } else {
                    ok(rows || []);
                }
            });
    });
}

function formatContents(contents: ContentType[]) {
    const result:ContentType[] = [];
    contents.forEach(c => {
        const content = result.find(x => x.orderNo === c.orderNo);
        if (content) {
            content.author += ` / ${c.author}`;
        } else {
            result.push(c);
        }
    });
    return result;
}

const { id } = Astro.params;
const { print } = Astro.props;

const dbPath = import.meta.env.BIBLIODB_PATH;
const db = new sqlite3.Database(dbPath);
const series = print.seriesId ? await getSeries(db, print.seriesId) : null;
const publisher = print.publisherId ? await getPublisher(db, print.publisherId) : null;
const brand = print.brandId ? await getBrand(db, print.brandId) : null;
const contents = formatContents(await getContents(db, id));
const links = await getRelatedLinks(db, id);
const title = series ? `${series.title} ${print.title}` : print.title;
const cover = links.find(x => x.linkType === 'IMG' && x.alt === '表紙');
---
<BaseLayout pageTitle={title}>
  <h2>{title}</h2>
  <div class="print">
    <div class="print-info">
        {
            cover ?
            <div class="cover"><img src={cover.url} /></div> :
            null
        }
        <table>
            <tbody>
                <tr><th>出版種別</th><td>{print.printType}</td></tr>
                <tr><th>出版社</th><td>{ brand ? `${publisher?.name}（${brand.name}）` : publisher?.name}</td></tr>
                <tr><th>発行日</th><td>{print.publicationDate}</td></tr>
                <tr><th>SEQ No</th><td>{print.issueNumber}</td></tr>
                {
                    print.description ?
                    <tr><th>解説</th><td>{print.description}</td></tr> :
                    null
                }
            </tbody>
        </table>
    </div>
    <div class="contents">
        <table>
            <thead>
                <tr>
                    <th>順番</th>
                    <th>色</th>
                    <th>種別</th>
                    <th>タイトル</th>
                    <th>著者</th>
                    <th>説明</th>
                    <th>ページ数</th>
                </tr>
            </thead>
            <tbody>
                {
                    contents.map((content) => (
                        <tr>
                            <td>{content.orderNo}</td>
                            <td>{ content.color == 1 ? "C" : ""}</td>
                            <td>{content.publishType.substring(0,2)}</td>
                            <td>{content.title}</td>
                            <td>{content.author}</td>
                            <td>{content.description}</td>
                            <td>{content.pageNo}</td>
                        </tr>
                    ))
                }
            </tbody>
        </table>
    </div>
</div>
</BaseLayout>

<style>
    .print {
        .print-info {
            display: flex;
            align-items: flex-start;
            gap: 10px;
            .cover {
                img {
                    width: 200px;
                }
            }
            table {
                font-size: 12px;
                border-collapse: collapse;
                width: unset;
                th {
                    font-weight: normal;
                    text-align: left;
                    vertical-align: top;
                    width: 100px;
                    padding: 0;
                }
                td {
                    width: 200px;
                    vertical-align: top;
                    padding: 0;
                }             
                > tbody > tr:nth-child(even) {
                    background-color: unset
                }

            }
        }
        .contents {
            table {
                font-size: 12px;
                border-collapse: collapse;
                width: 100%;
                th {
                    text-align: left;
                }
                th:nth-child(1), td:nth-child(1) {
                    text-align: right;
                }
                th:nth-child(2), td:nth-child(2) {
                    text-align: center;
                }
                th:nth-child(3), td:nth-child(3) {
                    text-align: center;
                }
                th:nth-child(7), td:nth-child(7) {
                    text-align: right;
                }
            }
        }
    }
 </style>