---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import sqlite3 from 'sqlite3';
import { marked } from 'marked';

import type { PersonType } from '../../../types/person';
import type { RelatedLinksType } from "../../../types/relatedLinks";
import { number, string } from 'astro:schema';

type ParamsType = {
    id: number;
};
type PropsType = {
    person: PersonType;
};
type GetStaticPathsType = {
    params: ParamsType;
    props: PropsType;
};
type WorkType = {
    id: number;
    title: string;
    publicationYear: number;
    contentType: string;
}
type PrintType = {
    id: number;
    printType: string;
    seriesTitle: string;
    title: string;
    publisher: string;
    publicationDate: string;
}
type MovieType = {
    id: number;
    title: string;
    originalTitle: string;
    country: string;
    releaseYear: string;
}

export async function getStaticPaths() {
    const dbPath = import.meta.env.BIBLIODB_PATH;
    return new Promise<GetStaticPathsType[]>((ok, ng) => {
        const db = new sqlite3.Database(dbPath);
        try {
            db.all<PersonType>("SELECT * FROM persons ORDER BY id", [], (err, rows) => {
                if (err) {
                    ng(err);
                } else {
                    ok(rows.map(x => ({
                        params: { id: x.id ?? 0 },
                        props: { person: x }
                    })));
                }
            });
        } finally {
            db.close();
        }
    });
}

function getWorks(db: sqlite3.Database, personId: number) {
    return new Promise<WorkType[]>((ok, ng) => {
        db.all<WorkType>(
            "SELECT w.id, w.title, w.publicationYear, w.contentType FROM works as w " +
            "LEFT JOIN related_persons as rp ON rp.relatedType = 'WORK' AND rp.relatedId = w.id " +
            "WHERE rp.personId = ? ORDER BY w.publicationYear, w.seqNo", 
            [personId], 
            (err, rows) => {
                if (err) {
                    ng(err);
                } else {
                    ok(rows || []);
                }
            });
    });
}

function getPrints(db: sqlite3.Database, personId: number) {
    return new Promise<PrintType[]>((ok, ng) => {
        db.all<PrintType>(
            "SELECT p.id, p.printType, s.title as seriesTitle, p.title, pub.name as publisher, p.publicationDate " +
            "FROM prints as p " +
            "LEFT JOIN related_persons as rp ON rp.relatedType = 'PRINT' AND rp.relatedId = p.id " +
            "LEFT JOIN series as s ON p.seriesId = s.id " +
            "LEFT JOIN publishers as pub ON p.publisherId = pub.id " +
            "WHERE rp.personId = ? ORDER BY p.publicationDate", 
            [personId], 
            (err, rows) => {
                if (err) {
                    ng(err);
                } else {
                    ok(rows || []);
                }
            });
    });
}

function getMovies(db: sqlite3.Database, personId: number) {
    return new Promise<MovieType[]>((ok, ng) => {
        db.all<MovieType>(
            "SELECT DISTINCT m.id, m.title, m.originalTitle, m.country, m.releaseYear " +
            "FROM movies as m " +
            "LEFT JOIN related_persons as rp ON rp.relatedType = 'MOVIE' AND rp.relatedId = m.id " +
            "WHERE rp.personId = ? ORDER BY m.releaseYear DESC", 
            [personId], 
            (err, rows) => {
                if (err) {
                    ng(err);
                } else {
                    ok(rows || []);
                }
            });
    });
}

function getRelatedLinks(db: sqlite3.Database, personId: number) {
    return new Promise<RelatedLinksType[]>((ok, ng) => {
        db.all<RelatedLinksType>(
            "SELECT * FROM related_links WHERE relatedType = 'PERSON' AND relatedId = ?",
            [personId],
            (err, rows) => {
                if (err) {
                    ng(err);
                } else {
                    ok(rows || []);
                }
            });
    });
}


const { id } = Astro.params;
const { person } = Astro.props;

const dbPath = import.meta.env.BIBLIODB_PATH;
const db = new sqlite3.Database(dbPath);
const works = await getWorks(db, id);
const prints = await getPrints(db, id);
const movies = await getMovies(db, id);
const links = await getRelatedLinks(db, id);

const portraitImage = links.find(x => x.linkType === 'IMG' && x.alt === '肖像');
const relatedLinks = links.filter(x => x.linkType === 'LINK');

---
<BaseLayout pageTitle={person.name}>
    <h2>{person.name}{ person.kana != null && person.kana != "" ? <span class="kana">({person.kana})</span> : null }</h2>
    <div class="person">
        <div class="person-info">
            {
                portraitImage ?
                <div class="portrait-image"><img src={portraitImage.url} /></div> :
                null
            }
            <table>
                <tbody>
                    { person.born ? <tr><th>生年月日：</th><td>{person.born}</td></tr> : null }
                    { person.died ? <tr><th>没年月日：</th><td>{person.died}</td></tr> : null }
                    {
                        relatedLinks.length > 0 ?
                        <tr><th>リンク：</th><td><Fragment set:html={relatedLinks.map(l => `<a href="${l.url}">${l.alt}</a>`).join("<br>")}/></td></tr> :
                        null
                    }    
                </tbody>
            </table>
        </div>
        {
            person.description != null && person.description != "" ?
            <div class="text-content description">
                <div class="text-content-label">備考：</div>
                <div class="text-content-data"><Fragment set:html={marked.parse(person.description)} /></div>
            </div> :
            null
        }
        <div class="tab">
            <button id="works-tab" class="selected">作品リスト</button>
            <button id="prints-tab">書籍リスト</button>
            <button id="movies-tab">映画リスト</button>
            <span>&nbsp;</span>
        </div>
        <div class="container works">
            <div class="container-header">
                <div class="container-row">
                    <div class="container-cell">No</div>
                    <div class="container-cell">タイトル</div>
                    <div class="container-cell">発表年</div>
                    <div class="container-cell">種別</div>
                </div>
            </div>
            <div class="contaner-body">
                {
                    works.map((work, idx) => (
                        <div class={`container-row ${idx % 2 == 0 ? "even" : "odd"}`}>
                            <div class="container-cell">{idx + 1}</div>
                            <div class="container-cell"><a href={`/bibliographic/works/${work.id}`}>{work.title}</a></div>
                            <div class="container-cell">{work.publicationYear}</div>
                            <div class="container-cell">{work.contentType}</div>
                        </div>
                    ))
                }
            </div>
        </div>
        <div class="container prints" style="display: none;">
            <div class="container-header">
                <div class="container-row">
                    <div class="container-cell">No</div>
                    <div class="container-cell">タイトル</div>
                    <div class="container-cell">出版社</div>
                    <div class="container-cell">発行日</div>
                    <div class="container-cell">種別</div>
                </div>
            </div>
            <div class="contaner-body">
                {
                    prints.map((print, idx) => (
                        <div class={`container-row ${idx % 2 == 0 ? "even" : "odd"}`}>
                            <div class="container-cell">{idx + 1}</div>
                            <div class="container-cell">
                                <a href={`/bibliographic/prints/${print.id}`}>{ (print.seriesTitle ?? "") != "" ? `${print.seriesTitle} ${print.title}` : print.title }</a>
                            </div>
                            <div class="container-cell">{print.publicationDate}</div>
                            <div class="container-cell">{print.printType}</div>
                        </div>
                    ))
                }
            </div>
        </div>
        <div class="container movies" style="display: none;">
            <div class="container-header">
                <div class="container-row">
                    <div class="container-cell">No</div>
                    <div class="container-cell">タイトル</div>
                    <div class="container-cell">国</div>
                    <div class="container-cell">公開年</div>
                </div>
            </div>
            <div class="contaner-body">
                {
                    movies.map((movie, idx) => (
                        <div class={`container-row ${idx % 2 == 0 ? "even" : "odd"}`}>
                            <div class="container-cell">{idx + 1}</div>
                            <div class="container-cell">
                                <a href={`/bibliographic/movies/${movie.id}`}>{movie.title}{movie.originalTitle ? `（${movie.originalTitle}）` : null}</a>
                            </div>
                            <div class="container-cell">{movie.country}</div>
                            <div class="container-cell">{movie.releaseYear ?? "??"}年</div>
                        </div>
                    ))
                }
            </div>
        </div>
    </div>
    <script>
        function openTab(tabName: string) {
            console.log(`openTab: ${tabName}`);
            const wokrs = document.querySelector('.container.works') as HTMLElement;
            const prints = document.querySelector('.container.prints') as HTMLElement;
            const movies = document.querySelector('.container.movies') as HTMLElement;
            if (tabName === 'works') {
                if (wokrs != null) { 
                    wokrs.style.display = 'block';
                    document.getElementById("works-tab")?.classList.add("selected");
                }
                if (prints != null) {
                    prints.style.display = 'none';
                    document.getElementById("prints-tab")?.classList.remove("selected");
                }
                if (movies != null) {
                    movies.style.display = 'none';
                    document.getElementById("movies-tab")?.classList.remove("selected");
                }
            } else if (tabName === 'prints'){
                if (wokrs != null) { 
                    wokrs.style.display = 'none';
                    document.getElementById("works-tab")?.classList.remove("selected");
                }
                if (prints != null) {
                    prints.style.display = 'block';
                    document.getElementById("prints-tab")?.classList.add("selected");
                }
                if (movies != null) {
                    movies.style.display = 'none';
                    document.getElementById("movies-tab")?.classList.remove("selected");
                }
            } else {
                if (wokrs != null) { 
                    wokrs.style.display = 'none';
                    document.getElementById("works-tab")?.classList.remove("selected");
                }
                if (prints != null) {
                    prints.style.display = 'none';
                    document.getElementById("prints-tab")?.classList.remove("selected");
                }
                if (movies != null) {
                    movies.style.display = 'block';
                    document.getElementById("movies-tab")?.classList.add("selected");
                }
            }
        }
        document.getElementById('works-tab')?.addEventListener('click', () => openTab('works'));
        document.getElementById('prints-tab')?.addEventListener('click', () => openTab('prints'));
        document.getElementById('movies-tab')?.addEventListener('click', () => openTab('movies'));
    </script>
</BaseLayout>

<style>
    h2 {
        .kana {
            font-size: 0.7em;
            margin-left: 1em;
        }
    }
    .person {
        .person-info {
            display: flex;
            align-items: flex-start;
            gap: 1em;
            margin-bottom: 1em;
            > .portrait-image > img {
                height: 200px;
            }
            > table {
                font-size: unset;
                border-collapse: collapse;
                width: unset;
                th {
                    font-weight: normal;
                    text-align: left;
                    vertical-align: top;
                    width: 6em;
                    padding: 0.2em;
                }
                td {
                    width: 40em;
                    vertical-align: top;
                    padding: 0.2em;
                }             
                > tbody > tr:nth-child(even) {
                    background-color: unset
                }

            }
        }
        .text-content {
            > div.text-content-data {
                margin-left: 1em;
            }
        }
        .tab {
            margin-top: 2em;
            display: flex;
            > button {
                box-sizing: border-box;
                margin: 0;
                padding: 0.5em 1em;
                width: 10em;
                background-color: #e0e0e0;
                border: 1px solid gray;
            }
            > button:first-child {
                border-right: none;
            }
            > button.selected {
                border-bottom: none;
                background-color: #eeeeee;
            }
            > span {
                display: block;
                flex-grow: 1;
                border-bottom: 1px solid gray;
            }
        }
        .container {
            margin-top: 1em;
            padding: 0;
            font-size: 12px;
            .container-header {
                margin: 0;
                padding: 0;
                border-bottom: 1px solid gray;
                font-weight: bold;
            }
            .contaner-body {
                margin: 0;
                padding: 0;
                max-height: 31em;
                overflow-y: auto;
            }
            .container-row {
                margin: 0;
                padding: 0;
                display: flex;
                .container-cell {
                    padding: 0.2em 1em;
                }
                .container-cell:nth-child(1) {
                    width: 4em;
                    text-align: right;
                }
                .container-cell:nth-child(2) {
                    width: 40em;
                    text-align: left;
                }
                .container-cell:nth-child(3) {
                    width: 6em;
                    text-align: right;
                }
                .container-cell:nth-child(4) {
                    width: 10em;
                    text-align: left;
                }
            }
            .container-row.even {
                background-color: #e0e0e0;
            }
        }
    }
</style>