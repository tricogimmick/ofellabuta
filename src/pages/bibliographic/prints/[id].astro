---
import type { GetStaticPaths } from "astro";
import BaseLayout from '../../../layouts/BaseLayout.astro';
import sqlite3 from 'sqlite3';
import { marked } from 'marked';

import type { PrintType } from '../../../types/print';
import type { SeriesType } from '../../../types/series';
import type { PublisherType } from "../../../types/publisher";
import type { BrandType } from "../../../types/brand";
import type { RelatedLinksType } from "../../../types/relatedLinks";

import { magazineData } from '../../../scripts/lib.ts'
import BreadcrumbList, { type BreadcrumbListType } from "../../../components/BreadcrumbList.astro";

type ParamsType = {
    id: number;
};
type PropsType = {
    print: PrintType;
};
type GetStaticPathsType = {
    params: ParamsType;
    props: PropsType;
};
type AuthorType = {
    id: number;
    name: string;
    role: string;
};
type WorkOfCoverType = {
    title: string;
};
type ContentType = {
    orderNo: number;
    color: number | null;
    publishType: string;
    serializationStatus: string;
    title: string;
    authorId: number | null;
    author: string;
    role: string;
    description: string;
    pageNo: number | null;
    workId: number | null;
};

export async function getStaticPaths() {
    const dbPath = import.meta.env.BIBLIODB_PATH;
    return new Promise<GetStaticPathsType[]>((ok, ng) => {
        const db = new sqlite3.Database(dbPath);
        try {
            db.all<PrintType>("SELECT * FROM prints ORDER BY id", [], (err, rows) => {
                if (err) {
                    ng(err);
                } else {
                    ok(rows.map(x => ({
                        params: { id: x.id ?? 0 },
                        props: { print: x }
                    })));
                }
            });
        } finally {
            db.close();
        }
    });
}

function getSeries(db: sqlite3.Database, seriesId: number) {
    return new Promise<SeriesType>((ok, ng) => {
        db.get<SeriesType>("SELECT * FROM series WHERE id = ?", [seriesId], (err, row) => {
            if (err) {
                ng(err);
            } else {
                ok(row);
            }
        });
    });
}

function getAuthors(db: sqlite3.Database, printId: number) {
    return new Promise<AuthorType[]>((ok, ng) => {
        db.all<AuthorType>(
            "SELECT p.id, p.name, rp.role FROM related_persons as rp " +
            "JOIN persons as p ON p.id = rp.personId " +
            "WHERE rp.relatedType = 'PRINT' AND rp.relatedId = ?",
            [printId],
            (err, rows) => {
                if (err) {
                    ng(err);
                } else {
                    ok(rows || []);
                }
            });
    });
}

function getPublisher(db: sqlite3.Database, publisherId: number) {
    return new Promise<PublisherType>((ok, ng) => {
        db.get<PublisherType>("SELECT * FROM publishers WHERE id = ?", [publisherId], (err, row) => {
            if (err) {
                ng(err);
            } else {
                ok(row);
            }
        });
    });
}

function getBrand(db: sqlite3.Database, brandId: number) {
    return new Promise<BrandType>((ok, ng) => {
        db.get<BrandType>("SELECT * FROM brands WHERE id = ?", [brandId], (err, row) => {
            if (err) {
                ng(err);
            } else {
                ok(row);
            }
        });
    });
}

function getWorkOfCover(db: sqlite3.Database, printId: number) {
    return new Promise<WorkOfCoverType>((ok, ng) => {
        db.get<WorkOfCoverType>(
            "SELECT w.title FROM related_works as r " +
            "JOIN works as w ON w.id = r.workId " +
            "WHERE r.relatedType = 'PRINT' AND r.subType = 'COVER' AND r.relatedId = ? ",
            [printId],
            (err, row) => {
                if (err) {
                    ng(err);
                } else {
                    ok(row || '');
                }
            });
    });
}

function getContents(db: sqlite3.Database, printId: number) {
    return new Promise<ContentType[]>((ok, ng) => {
        db.all<ContentType>(
            "SELECT c.orderNo, c.color, c.publishType, c.serializationStatus, " +
            "IFNULL(w.title, c.title) as title, p.id as authorId, p.name as author, rp.role, c.description, c.pageNo, c.workId " +
            "FROM contents as c " +
            "LEFT JOIN works as w on w.id = c.workId " +
            "LEFT JOIN related_persons as rp ON rp.relatedType = 'WORK' and rp.relatedId = w.id " +
            "LEFT JOIN persons as p on p.id = rp.personId " + 
            "WHERE c.printId = ? " +
            "ORDER BY c.orderNo", 
            [printId], 
            (err, rows) => {
            if (err) {
                ng(err);
            } else {
                ok(rows || []);
            }
        });
    });
}

function getRelatedLinks(db: sqlite3.Database, printId: number) {
    return new Promise<RelatedLinksType[]>((ok, ng) => {
        db.all<RelatedLinksType>(
            "SELECT * FROM related_links WHERE relatedType = 'PRINT' AND relatedId = ?",
            [printId],
            (err, rows) => {
                if (err) {
                    ng(err);
                } else {
                    ok(rows || []);
                }
            });
    });
}

function formatContents(contents: ContentType[]) {
    const result:ContentType[] = [];
    contents.forEach(c => {
        const content = result.find(x => x.orderNo === c.orderNo);
        if (content) {
            content.author += ` / <a href="/bibliographic/persons/${c.authorId}">${c.author}</a>`;
        } else {
            c.author = c.author ? `<a href="/bibliographic/persons/${c.authorId}">${c.author}</a>` : '';
            result.push(c);
        }
    });
    return result;
}

const { id } = Astro.params;
const { print } = Astro.props;

const dbPath = import.meta.env.BIBLIODB_PATH;
const db = new sqlite3.Database(dbPath);
const series = print.seriesId ? await getSeries(db, print.seriesId) : null;
const authors = await getAuthors(db, id);
const publisher = print.publisherId ? await getPublisher(db, print.publisherId) : null;
const brand = print.brandId ? await getBrand(db, print.brandId) : null;
const workOfCover = await getWorkOfCover(db, id);

const contents = formatContents(await getContents(db, id));
const links = await getRelatedLinks(db, id);
const title = series ? `${series.title} ${print.title}` : print.title;
const bannerImage = links.find(x => x.linkType === 'IMG' && x.alt === 'バナー');
const coverImage = links.find(x => x.linkType === 'IMG' && x.alt === '表紙');
const relatedLinks = links.filter(x => x.linkType === 'LINK');

const magData = magazineData.find(x => x.id === print.seriesId);

const breadcrumbList: BreadcrumbListType = {
    items: [
        { name: "Bibliographic Data", url: "/bibliographic" },
    ]
};
if (series) {
    breadcrumbList.items.push({name: series?.title ?? "", url: `/bibliographic/series/${series.id}`});
}

---
<BaseLayout pageTitle={title}>
    <BreadcrumbList {breadcrumbList} />
    <h2>{title}</h2>
    {
        bannerImage ?
        <div class="banner"><img src={bannerImage.url} alt={bannerImage.alt} /></div> :
        null
    }
    <div class="print">
        <div class="print-info">
            {
                coverImage ?
                <div class="cover"><img src={coverImage.url} alt={coverImage.alt} /></div> :
                null
            }
            <table>
                <tbody>
                    <tr><th>タイトル：</th><td>{title}</td></tr>
                    <tr><th>出版種別：</th><td>{print.printType}</td></tr>
                    {
                        authors.map((author, index) => (
                            <tr><th>{author.role}：</th><td><a href={`/bibliographic/persons/${author.id}`}>{author.name}</a></td></tr>
                        ))
                    }
                    <tr><th>出版社：</th><td>{ brand ? `${publisher?.name}（${brand.name}）` : publisher?.name}</td></tr>
                    <tr><th>発行日：</th><td>{print.publicationDate}</td></tr>
                    <tr><th>管理番号：</th><td>{print.issueNumber}</td></tr>
                    {
                        workOfCover ?
                        <tr><th>表紙：</th><td>{workOfCover.title}</td></tr> :
                        null
                    }
                    {
                        relatedLinks.length > 0 ?
                        <tr><th>リンク：</th><td><Fragment set:html={relatedLinks.map(l => `<a href="${l.url}">${l.alt}</a>`).join("<br>")}/></td></tr> :
                        null
                    }
                </tbody>
            </table>
        </div>
        {
            print.description ?
            <div class="text-content description">
                <div class="text-content-label">備　考：</div>
                <div class="text-content-data"><Fragment set:html={marked.parse(print.description)} /></div>
            </div> :
            null
        }
        {
            print.note ?
            <div class="text-content note">
                <div class="text-content-label">Note：</div>
                <div class="text-content-data"><Fragment set:html={marked.parse(print.note)} /></div>
            </div> :
            null
        }
        {
            print.toc ?
            <div class="text-content toc">
                <div class="text-content-label">目　次：</div>
                <div class="text-content-data"><Fragment set:html={marked.parse(print.toc)} /></div>
            </div> :
            null
        }
        {
            contents.length > 1 || contents.length == 1 && contents[0].title != print.title ?
            <div class="contents">
                <table>
                    <thead>
                        <tr>
                            <th class="order-no">順番</th>
                            {
                                print.printType === '雑誌' ?
                                <th class="color">色</th>
                                <th class="publish-type">種別</th>
                                : null
                            }
                            <th class="title">タイトル</th>
                            <th class="author">著者</th>
                            <th class="description">説明</th>
                            <th class="page-no">ページ数</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            contents.map((content) => (
                                <tr>
                                    <td class="order-no">{content.orderNo}</td>
                                    {
                                        print.printType === '雑誌' ?
                                        <td class="color">{ content.color == 1 ? "C" : ""}</td>
                                        <td class="publish-type">{content.publishType.substring(0,2)}</td>
                                        : null
                                    }
                                    <td class="title">
                                        {
                                            content.workId ?
                                            <a href={`/bibliographic/works/${content.workId}`}>{content.title}</a> :
                                            content.title
                                        }
                                    </td>
                                    <td class="author"><Fragment set:html={content.author} /></td>
                                    <td class="description"><Fragment set:html={content.description} /></td>
                                    <td class="page-no">{content.pageNo}</td>
                                </tr>
                            ))
                        }
                    </tbody>
                </table>
            </div>
            : null
        }
    </div>
</BaseLayout>

<style>
    .banner {
        margin-bottom: 1em;
    }
    .print {
        .print-info {
            display: flex;
            align-items: flex-start;
            gap: 1em;
            margin-bottom: 1em;
            .cover {
                img {
                    width: 200px;
                }
            }
            table {
                border-collapse: collapse;
                width: unset;
                font-size: unset;
                th {
                    font-weight: normal;
                    text-align: left;
                    vertical-align: top;
                    width: 6em;
                    padding: 0.2em;
                }
                td {
                    vertical-align: top;
                    padding: 0.2em;
                    width: 40em;
                    > p:first-child {
                        margin-top: 0;
                    }
                }             
                > tbody > tr:nth-child(even) {
                    background-color: unset
                }
            }
        }
        .text-content {
            > div.text-content-data {
                margin-left: 1em;
            }
        }
        .contents {
            table {
                border-collapse: collapse;
                width: 100%;
                th {
                    text-align: left;
                }
                .order-no {
                    text-align: right;
                    width: 3em;
                }
                .color {
                    text-align: center;
                }
                .publish-type {
                    text-align: center;
                }
                .page-no {
                    text-align: right;
                }
            }
        }
    }
 </style>