---
import type { GetStaticPaths } from "astro";
import BaseLayout from '../../../layouts/BaseLayout.astro';
import sqlite3 from 'sqlite3';
import { marked } from 'marked';

import type { WorkType } from '../../../types/work';
import type { RelatedLinksType } from "../../../types/relatedLinks";


type ParamsType = {
    id: number;
};
type PropsType = {
    work: WorkType;
};
type GetStaticPathsType = {
    params: ParamsType;
    props: PropsType;
};
type AuthorType = {
    id: number;
    name: string;
    role: string;
};
type firstPublishedType = {
    title: string;
    description: string;
}
type PrintType = {
    id: number;
    series: string;
    title: string;
    publisher: string;
    publicationDate: string;
    printType: string;
}

export async function getStaticPaths() {
    const dbPath = import.meta.env.BIBLIODB_PATH;
    return new Promise<GetStaticPathsType[]>((ok, ng) => {
        const db = new sqlite3.Database(dbPath);
        try {
            db.all<WorkType>("SELECT * FROM works ORDER BY id", [], (err, rows) => {
                if (err) {
                    ng(err);
                } else {
                    ok(rows.map(x => ({
                        params: { id: x.id ?? 0 },
                        props: { work: x }
                    })));
                }
            });
        } finally {
            db.close();
        }
    });
}

function getAuthors(db: sqlite3.Database, printId: number) {
    return new Promise<AuthorType[]>((ok, ng) => {
        db.all<AuthorType>(
            "SELECT p.id, p.name, rp.role FROM related_persons as rp " +
            "JOIN persons as p ON p.id = rp.personId " +
            "WHERE rp.relatedType = 'WORK' AND rp.relatedId = ?",
            [printId],
            (err, rows) => {
                if (err) {
                    ng(err);
                } else {
                    ok(rows || []);
                }
            });
    });
}

function getFirstPublished(db: sqlite3.Database, workId: number) {
    return new Promise<firstPublishedType>((ok, ng) => {
        db.get<firstPublishedType>(
            "SELECT s.title, r.description " +
            "FROM related_series as r " +
            "JOIN series as s ON s.id = r.seriesId  " +
            "WHERE r.relatedType = 'WORK' AND r.relatedId = ? AND r.isMedia = 1",
            [workId],
            (err, row) => {
                if (err) {
                    ng(err);
                } else {
                    ok(row);
                }
            });
    });
}

function getRelatedLinks(db: sqlite3.Database, workId: number) {
    return new Promise<RelatedLinksType[]>((ok, ng) => {
        db.all<RelatedLinksType>(
            "SELECT * FROM related_links WHERE relatedType = 'WORK' AND relatedId = ?",
            [workId],
            (err, rows) => {
                if (err) {
                    ng(err);
                } else {
                    ok(rows || []);
                }
            });
    });
}

function getPrints(db: sqlite3.Database, workId: number) {
    return new Promise<PrintType[]>((ok, ng) => {
        db.all<PrintType>(
            "SELECT p.id, s.title as series, p.title, pb.name as publisher, p.publicationDate, p.printType " +
            "FROM contents as c " +
            "JOIN prints as p ON p.id = c.printId " +
            "LEFT JOIN series as s ON s.id = p.seriesId " +
            "LEFT JOIN publishers as pb ON pb.id = p.publisherId " +
            "WHERE c.workId = ? " +
            "ORDER BY p.publicationDate",
            [workId],
            (err, rows) => {
                if (err) {
                    ng(err);
                } else {
                    ok(rows || []);
                }
            });
    });
}

const { id } = Astro.params;
const { work } = Astro.props;

const dbPath = import.meta.env.BIBLIODB_PATH;
const db = new sqlite3.Database(dbPath);
const authors = await getAuthors(db, id);
const firstPublished = await getFirstPublished(db, id);
const links = await getRelatedLinks(db, id);
const prints = await getPrints(db, id);

const title = work.title ?? "Unknown";
const relatedLinks = links.filter(x => x.linkType === 'LINK');

---
<BaseLayout pageTitle={title}>
    <h2>{title}</h2>
    <div class="work">
        <div class="work-info">
            <table>
                <tbody>
                    {
                        work.variantTitles != null && work.variantTitles != "" ?
                        <tr><th>別名：</th><td>{work.variantTitles}</td></tr> : null
                    }
                    <tr><th>種別：</th><td>{work.contentType}</td></tr>
                    {
                        authors.map((author, idx) => (
                            <tr>
                                <th>{author.role}：</th>
                                <td><a href={`/bibliographic/persons/${author.id}`}>{author.name}</a></td>
                            </tr>
                        ))
                    }    
                    { 
                        firstPublished ? 
                        <tr><th>掲載：</th><td>{firstPublished.title} {firstPublished.description}</td></tr> : null
                    }
                    <tr><th>発表年：</th><td>{work.publicationYear ?? "??"}年{ work.publicationEndYear != null ? ` 〜 ${work.publicationEndYear}年` : "" }</td></tr>
                    {
                        relatedLinks.length > 0 ?
                        <tr><th>リンク：</th><td><Fragment set:html={relatedLinks.map(l => `<a href="${l.url}">${l.alt}</a>`).join("<br>")}/></td></tr> :
                        null
                    }    
                    
                </tbody>
            </table>
        </div>
        {
            work.synopsis != null && work.synopsis != "" ?
            <div class="text-content synopsis">
                <div class="text-content-label">粗筋：</div>
                <div class="text-content-data"><Fragment set:html={marked.parse(work.synopsis)} /></div>
            </div> :
            null
        }
        {
            work.description != null && work.description != "" ?
            <div class="text-content description">
                <div class="text-content-label">備考：</div>
                <div class="text-content-data"><Fragment set:html={marked.parse(work.description)} /></div>
            </div> :
            null
        }
        {
            work.note != null && work.note != "" ?
            <div class="text-content note">
                <div class="text-content-label">Note：</div>
                <div class="text-content-data"><Fragment set:html={marked.parse(work.note)} /></div>
            </div> :
            null
        }
        {
            prints.length > 0 ?
            <div class="prints">
                <h4>掲載書籍・雑誌</h4>
                <table>
                    <thead>
                        <tr>
                            <th>No</th>
                            <th>タイトル</th>
                            <th>出版社</th>
                            <th>発行日</th>
                            <th>種別</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            prints.map((print, i) => (
                                <tr>
                                    <td>{i + 1}</td>
                                    <td><a href={`/bibliographic/prints/${print.id}`}>{ print.series } { print.title }</a></td>
                                    <td>{ print.publisher}</td>
                                    <td>{ print.publicationDate }</td>
                                    <td>{ print.printType}</td>
                                </tr>
                            ))
                        }
                    </tbody>
                </table>
            </div>    
            : null
        }
    </div>
</BaseLayout>  

<style>
    .work {
        font-size: 14px;
        .work-info {
            table {
                border-collapse: collapse;
                width: unset;
                font-size: unset;
                th {
                    font-weight: normal;
                    text-align: left;
                    vertical-align: top;
                    width: 6em;
                    padding: 0.2em;
                }
                td {
                    vertical-align: top;
                    padding: 0.2em;
                    width: 40em;
                }             
                > tbody > tr:nth-child(even) {
                    background-color: unset
                }

            }
        }
        .text-content {
            padding: 0.2em;
            > div.text-content-data {
                margin-left: 1em;
            }
        }
        .prints {
            table {
                border-collapse: collapse;
                width: 100%;
                th {
                    text-align: left;
                }
                th:nth-child(1), td:nth-child(1) {
                    width: 20px;
                    text-align: right;
                }
            }
        }
    }
</style>